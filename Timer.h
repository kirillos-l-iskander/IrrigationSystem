#ifndef TIMER_H
#define TIMER_H

#include "Config.h"

typedef enum
{
	TIMER_ID_0 = 0,
	TIMER_ID_1,
	TIMER_ID_2,
	TIMER_ID_MAX,
}	TIMER_ID_t;

typedef enum
{
	TIMER_MODE_NORMAL = 0,
	TIMER_MODE_COUNTUP,
}	TIMER_MODE_t;

typedef enum
{
	TIMER_CHANNEL_NORMAL = 0,
	TIMER_CHANNEL_1,
	TIMER_CHANNEL_2,
}	TIMER_CHANNEL_t;

typedef enum
{
	TIMER_EVENT_NORMAL = 0,
	TIMER_EVENT_CLOCKIN_RISING,
	TIMER_EVENT_CLOCKIN_FALLING,
	TIMER_EVENT_CAPTURE_RISING,
	TIMER_EVENT_CAPTURE_FALLING,
	TIMER_EVENT_COMPARE_TOGGLE,
	TIMER_EVENT_COMPARE_RESET,
	TIMER_EVENT_COMPARE_SET,
	TIMER_EVENT_PWM_NONINVERT,
	TIMER_EVENT_PWM_INVERT,
}	TIMER_EVENT_t;

typedef enum
{
	TIMER_PERIOD_MIN = 0,
	TIMER_PERIOD_MAX = 1000,
}	TIMER_PERIOD_t;

typedef enum
{
	TIMER_COUNTER_MIN = 0,
	TIMER_COUNTER_MAX = 65535,
}	TIMER_COUNTER_t;

typedef enum
{
	TIMER_PWM_MIN = 0,
	TIMER_PWM_MAX = 100,
}	TIMER_PWM_t;

void Timer_init( TIMER_ID_t id, TIMER_MODE_t mode, TIMER_PERIOD_t period, TIMER_CHANNEL_t channel, TIMER_EVENT_t event );
void Timer_setPwmDutyCycle( TIMER_ID_t id, TIMER_CHANNEL_t channel, TIMER_PWM_t pwmDutyCycle );
TIMER_PWM_t Timer_getPwmDutyCycle( TIMER_ID_t id, TIMER_CHANNEL_t channel );
void Timer_enableInterrupt( TIMER_ID_t id );

#endif /* TIMER_H */
